
aws-ec2-lock-ssh
EC2 被鎖住不能使用 SSH 登入 怎麼辦？
2020-10-28
<p>不小心弄錯設定，造成 root 權限的 ubuntu 無法 SSH 登入了，怎辦？有辦法搶救嗎？</p><h2>緣起</h2><p>為了限制 AWS EC2 上某個 user 僅能使用 <strong>SFTP</strong> 在自己的 <strong>家目錄</strong> 內運作，於是我更改 Server 的 <code>sshd_config</code>，加入了對該 <strong>user</strong> 的 <code>ChrootDirectory</code>、<code>ForceCommand</code> 與 <code>AllowTcpForwarding</code> 設定。</p><p>但手殘卻不小心把 <code>Match User</code> 註解了..</p><p>如此一來會造成所有 User 皆只能使用 SFTP 連上 Server，並且根目錄僅能在自己的 <strong>家目錄</strong> 內，而且 <strong>不能往上層移動</strong> 😢</p><h2>處理過程</h2><p>以下是我試圖搶救的過程，不是一個最佳的方式，如要了解最適合的方法可以直接看下方結論～</p><p>首先 root 權限的 ubuntu 因為 <code>sshd_config</code> 的設定值關係所以無法 SSH 上 server</p><p>每當使用 SSH 連線時，就會有錯誤訊息：<code>This service allows sftp connections only.</code></p><p>所以 SSH 這條路算是封死了..</p><p>那試著 <code>SFTP</code> 上去看能不能修改與更新 <code>sshd_config</code>，然後 <strong>重啟</strong> 上系統自動 <code>ssh reload</code></p><p>但是由於 <strong>不能往上層移動</strong> 的限制，自然的也就無法變更到 <code>sshd_config</code> 😫</p><p>萬念俱灰之下還嘗試了將 Server build 出 <code>image</code>，想藉由 image launch 新的 EC2 instance</p><p>結果當然失敗，因為既然是 image..，所以設定值一模一樣，SSH 上這台新的 instance 也是一樣的錯誤訊息 <code>This service allows sftp connections only.</code></p><p>所以 image 方式也是失敗..</p><h2>備份資料</h2><p>既然無法進去 Server，那換個角度，至少要想辦法備份資料吧？</p><p>雖然程式碼都有上 git，但是很多 config 都是被 gitignore 的，如果遺失勢必麻煩..</p><p>此時我想起 AWS EC2 的服務是拆成</p><ol><li>運算</li><li>儲存</li></ol><p>所以收費時有三個收費項目</p><ol><li>運算</li><li>儲存</li><li>流量</li></ol><p>那代表儲存是獨立切開的，而且資料是儲存在 EC2 的硬碟上的，也就是 <strong>Volume</strong>，那就把腦筋動到 Volume 上吧！</p><p><img src="https://www.ioa.tw/img/956a3006c41b6528e0213c160ef53fd7.jpg" alt=""/></p><h3>複製 Volume</h3><p>以我這台主要的 EC2 <code>i-xxx</code> 的機器來說，所搭配的硬碟是 <code>vol-xxx</code>，如下圖 <strong>1</strong> 代表的就是發生問題的 EC2 instance，而標示 <strong>3</strong> 則是這台 EC2 所掛載的 Volume <code>vol-xxx</code></p><p><img src="https://www.ioa.tw/img/84e4057829dd65edc3f322a6c8f48b52.jpg" alt=""/></p><p>點擊標示 3 的 <code>vol-xxx</code> ID 後會跳至 Volumes 頁面，檢視其細節，如下圖可以得知當初我並未對硬碟座加密，所以看來是有機會的可以讀出內容</p><p><img src="https://www.ioa.tw/img/b76e7b18a5b5264e532654a427796284.jpg" alt=""/></p><p>方法就是將此 <code>vol-xxx</code> 的 volume clone 一份出來，並且開啟另一台 EC2 instance <code>i-ooo</code> 然後掛載上去！</p><p>首先對這個 <code>vol-xxx</code> 右鍵選擇 <code>Create Snapshot</code>，建立一份此 Volume 的 <strong>快照</strong></p><p><img src="https://www.ioa.tw/img/5a0efe88aacd66ff2ca651ead106e2cb.jpg" alt=""/></p><p>然後點擊去 Snapshots 頁面上看所產生的 Volume Snapshot</p><p><img src="https://www.ioa.tw/img/8822751f9f380176300a16bc129ff56a.jpg" alt=""/></p><p>如下圖就是 <code>vol-xxx</code> 所產生的快照 <code>snap-xxx</code></p><p><img src="https://www.ioa.tw/img/9a559abd274fddbc029a80cbf8313cb1.jpg" alt=""/></p><p>然後對著 <code>snap-xxx</code> 右鍵選擇 <code>Create Volume</code>，建立一份與原本一樣的 Volume</p><p><img src="https://www.ioa.tw/img/87fb064f0c419fa5ccc6a031199e0556.jpg" alt=""/></p><p>回到 Volumes 頁面，可以看到多出一顆新的 Volume，如下圖的綠框 <code>vol-ooo</code></p><p><img src="https://www.ioa.tw/img/8974810b521f17964c83b34c27fef917.jpg" alt=""/></p><p>以上流程就是 Volume1 -&gt; Snapshot -&gt; Volume2，所以 Volume1 內容 == Volume2 內容</p><h3>掛載 Volume 至新的 EC2</h3><p>接著開一台新的 EC2 instance <code>i-ooo</code>，方法可以參考 <a href="https://www.ioa.tw/AWS/EC2-Ubuntu.html">此篇</a></p><p>如下圖，開好後在 Instances 頁面看到多出一台全新的 EC2 實例，紅框為原本的 EC2 instance <code>i-xxx</code>，綠框為新的 EC2 instance <code>i-ooo</code></p><p><img src="https://www.ioa.tw/img/63bb34e4f2abfbe80cb08b8a76de7748.jpg" alt=""/></p><p>當然新的 EC2 一開始會有一顆預載的 8G 硬碟，所以回到 Volumes 頁面看，也會看到多出來的那顆硬碟</p><p>如下圖紅色為原本舊 EC2 instance <code>i-xxx</code> 的 volume <code>vol-xxx</code>，綠色是 clone 出來的 volume <code>vol-ooo</code>，藍色就是新開啟的 EC2 instance <code>i-ooo</code> 所使用的預設的 volume <code>vol-aaa</code></p><p><img src="https://www.ioa.tw/img/bd66351452d383269680ed62f9284024.jpg" alt=""/></p><p>接著掛載 <code>vol-ooo</code> 到剛剛開啟的 <code>i-ooo</code> instance 上，直接點選 <code>vol-ooo</code> 右鍵選擇 <code>Attach Volume</code></p><p><img src="https://www.ioa.tw/img/178347c9c8e54834407d60fb5c1531ab.jpg" alt=""/></p><p>將 <code>vol-ooo</code> 掛載到 <code>i-ooo</code> instance 上，並且要注意一下 Device 此硬碟的編號（綠框）<code>sdf</code>，掛載好之後回到 Instances 頁面上，將 <code>i-ooo</code> 的 EC2 instance 做 <strong>Reboot</strong></p><p><img src="https://www.ioa.tw/img/de61146933c6d24413418c0dbd45063b.jpg" alt=""/></p><h3>讀取掛載的 Volume</h3><p>馬上使用 SSH 到 <code>i-ooo</code> 的 EC2 instance 上，並且切換身份至 root，所以輸入指令 <code>sudo -s</code></p><p><img src="https://www.ioa.tw/img/1a395e5e475863e5e2df8311185fbfe2.jpg" alt=""/><img src="https://www.ioa.tw/img/97ee128e811a606210f6de6e74589ded.jpg" alt=""/></p><p>切換好身份後，輸入指令 <code>lsblk</code> 列出此機器上有多少顆硬碟</p><p>紅框代表預載的 8G volume <code>vol-aaa</code>，而綠框則舊是那刻 20G 的 <code>vol-ooo</code> volume</p><p><code>xvda</code> 代表磁碟 <code>xvda1</code> 則是第一個磁區，而 <code>xvdf</code> 則就是 <code>vol-ooo</code> 那顆磁碟，而 <code>xvdf1</code> 就是他裡面的第一個磁區</p><p><code>xvdf</code> 與在掛載時 Device 所標示的 <code>sdf</code> 尾數應該會是一樣的 <code>f</code>，所以掛載多顆硬碟時要注意一下才不會認錯顆</p><p><img src="https://www.ioa.tw/img/40aad4083aed42b1c1dd2fbc5a8ba997.jpg" alt=""/></p><p>接著依然採用 root 身份，在 <code>/</code> <strong>根目錄</strong> 下建立一個 <code>test</code> 目錄</p><p><img src="https://www.ioa.tw/img/29477d6dda0da80a60f82440da6efb27.jpg" alt=""/></p><p>建立好 <code>/test</code> 目錄後，就要設定將 <code>xvdf1</code> 磁區連結到 <code>/test</code> 目錄，所以使用指令 <code>mount /dev/xvdf1 /test</code></p><p>接著再用指令 <code>lsblk</code> 列出此機器上有多少顆硬碟</p><p>如下圖可以看到 <code>xvda1</code> 磁區 mount 到 <code>/</code> 根目錄，而 <code>xvdaf</code> 磁區 mount 到 <code>/test</code> 目錄，那就代表完成了</p><p><img src="https://www.ioa.tw/img/867377451487ea7c8898355902e7f93c.jpg" alt=""/></p><p>太好了！直接進入 <code>/test</code> 目錄吧！</p><p>列出 <code>/test</code> 目錄內的內容，完全的可以讀出資料就代表完成了！！！！😂</p><p><img src="https://www.ioa.tw/img/ebff779e93b2015131c9ad451d3be3f0.jpg" alt=""/></p><h2>結論</h2><p>上述的過程是我自己的處理經驗流程，但是事後經由我自己的不斷再次嘗試，其實有更好的處理方式，方法總結如下：</p><ol><li>關閉舊的 EC2 instance <code>i-xxx</code></li><li>將舊的 Volume <code>vol-xxx</code> <strong>Detach</strong>(卸下)</li><li>Launch 一台新的 EC2 instance <code>i-ooo</code></li><li>將卸下的 Volume <code>vol-xxx</code> <strong>Attach</strong>(掛載)到新的 EC2 instance <code>i-ooo</code>，並 <strong>Reboot</strong>(重啟) <code>i-ooo</code></li><li>SSH 上新的 EC2 instance <code>i-ooo</code> 上，直接使用 <strong>sudo</strong> 權限 <strong>mount</strong> <code>vol-xxx</code> 的磁區到 <code>/test</code> 目錄</li><li>使用 <strong>sudo</strong> 權限修正 <code>/test/etc/ssh/sshd_config</code> 儲存</li><li><strong>Stop</strong>(關閉) EC2 instance <code>i-ooo</code></li><li>將 Volume <code>vol-xxx</code> 從 EC2 instance <code>i-ooo</code> 上 <strong>Detach</strong>(卸下)</li><li>將Volume <code>vol-xxx</code> <strong>Attach</strong>(掛載)到原本的 EC2 instance <code>i-xxx</code>，並 <strong>Reboot</strong>(重啟) <code>i-ooo</code></li><li>就可以成功的 SSH 上原本的 EC2 instance <code>i-xxx</code></li></ol><p>以上是濃縮再濃縮、提鍊再提煉的處理步驟了，雖然前面走了很多冤旺路，但是也獲得了很多寶貴的技術知識 😳</p>
<ul><li><a href="https://docs.aws.amazon.com/zh_tw/AWSEC2/latest/UserGuide/ebs-using-volumes.html">使 Amazon EBS 磁碟區可供在 Linux 上使用 - Amazon Elastic Compute Cloud</a></li><li><a href="https://unix.stackexchange.com/questions/143925/locked-myself-out-of-amazon-ec2-ssh-this-service-allows-sftp-connections-only">Locked myself out of Amazon EC2 SSH - This service allows sftp connections only</a></li><li><a href="https://www.cnblogs.com/pu20065226/p/10962906.html">This service allows sftp connections only - pu20065226 - 博客园</a></li></ul>

ios-create-cocoa-pods
自己做自己的 CocoaPods
2019-08-12
<p>寫到一定程度之後，總會有幾個自己愛用語熟悉的 Lib，那就自己做一下屬於自己的 pod 套件吧！</p><h2>新增</h2><p>以下會用 <code>OAPodTest</code> 當作套件名稱範例，各位要做自己的套件請用自己的名稱捏！由於 pod 套件可與 <a href="https://github.com/">GitHub</a> 綁定，讓他自動去抓上面的原始碼，所以請先開一個 GitHub repository！</p><p>這是我自己的 GitHun Repository：<a href="https://github.com/comdan66/OAPodTest">https://github.com/comdan66/OAPodTest</a></p><ul><li>先把 GitHub 上的專案 Clone 下來</li><li>進入專案，然後執行指令 <code>pod lib create OAPodTest</code>，Pod 會自動去 <code>https://github.com/CocoaPods/pod-template.git</code> 複製一份 <code>.podspec</code> 樣式下來</li></ul><h3>依據步驟回答即可</h3><ul><li>What platform do you want to use?? [ iOS / macOS ]<br />此 lib 是給哪種系統平台用？<br />➜ iOS</li><li>What language do you want to use?? [ Swift / ObjC ]<br />此 lib 是主要哪種語言？<br />➜ Swift</li><li>Would you like to include a demo application with your library? [ Yes / No ]<br />此 lib 裡面要不要給予 Demo 範例<br />➜ Yes</li><li>Which testing frameworks will you use? [ Quick / None ]<br />測試框架，不知道用在哪ＸＤ<br />➜ None</li><li>Would you like to do view based testing? [ Yes / No ]<br />不知道ＸＤ<br />➜ No</li></ul><h3>編輯與設定</h3><ul><li>編輯 <code>OAPodTest.podspec</code></li><li>通常需要以下幾個項目：<ul><li>s.name                  名稱</li><li>s.version               版本</li><li>s.summary               簡述</li><li>s.description           描述</li><li>s.homepage              GitHub 網址</li><li>s.license               授權</li><li>s.author                擁有者</li><li>s.source                原始碼</li><li>s.social_media_url     介紹的網頁</li><li>s.ios.deployment_target 版本限制</li><li>s.source_files          原始碼位置</li><li>s.frameworks            使用哪些框架</li></ul></li></ul><blockquote><p>通常要該改的有 name、version、summary、description、social_media_url、ios.deployment_target、frameworks</p></blockquote><h2>撰寫範例</h2><ul><li><p>打開 <code>Example/OAPodTest.xcworkspace</code></p><ul><li>目錄 <code>Example for OAPodTest</code> 是提供範例的地方</li><li>目錄 <code>Pods/Development Pods/OAPodTest/</code> 下為 lib 的地方，<code>ReplaceMe.swift</code> 就是要你把 lib 放在這邊的意思，您可以自己更換名稱或新增其他檔案</li></ul></li><li><p>ReplaceMe.swift 內容範例</p></li></ul><pre><code class="language-Swift">public func testFunc(_ a: Int) -&gt; String {    return String.init(format: "Int: %d", a)}</code></pre><ul><li>編輯 <code>Example for OAPodTest/ViewController.swift</code> 在上面加入 <code>import OAPodTest</code> 即可使用 <code>testFunc</code></li></ul><h2>部署</h2><ul><li>首次部署記得檢查此 Git 有無設定 github 的 origin，沒有的話可以執行指令 <code>git remote add origin https://github.com/comdan66/OAPodTest.git</code> 設定</li><li>設定版號，修改 <code>OAPodTest.podspec</code> 內的 <code>version</code>，改為 <code>0.0.1</code>(此版本號碼您可自己設定)</li><li>先做 git push 以及 tag 的 push<ul><li>全部加入並且丟到 origin，執行指令：<code>git add -A &amp;&amp; git ci -m 'Fix .podspec' &amp;&amp; git ps master</code></li><li>新增一個 Tag 名稱為 <code>0.0.1</code>，並且將 tag 也丟到 origin，執行指令：<code>git tag 0.0.1 &amp;&amp; git push --tags</code></li></ul></li><li>更新至 pod<ul><li>檢查 Github 頁面有無 <code>0.0.1</code> 的 tag</li><li>丟上去，這邊會有點久，執行指令：<code>pod trunk push OAPodTest.podspec</code></li><li>如果有警告的情況，要忽略警告可以加上 <code>--allow-warnings</code> 參數，指令：<code>pod trunk push OAPodTest.podspec --allow-warnings</code>，通常你如果 <code>.podspec</code> 內容沒修改敘述之類的，他會警告你</li><li>成功的話 理論上 <code>https://cocoapods.org/pods/OAPodTest</code> 可以直接有網頁看得到，或者可以用指令 <code>pod trunk info OAPodTest</code> 檢查是否有存在以及其線上相關版號資訊</li></ul></li></ul><p><img src="https://www.ioa.tw/img/3593d8b07ff9e731583a8387fc8a29cc.png" alt="成功資訊"/></p><h2>取用</h2><ul><li>測試有無存在，執行指令：<code>pod trunk info OAPodTest</code></li><li>開新的 ios Swift 專案名稱為 <code>Test</code>，並且做 <a href="https://www.ioa.tw/Develop/iOS-CocoaPods-note.html">pod init</a></li><li>編輯 <code>Podfile</code>，加入 <code>pod 'OAPodTest'</code> 然後儲存</li><li>執行安裝 pod 執行指令：<code>pod install</code>，然後執行 <code>Test.xcworkspace</code><ul><li>可以檢查目錄 <code>Pods/Pods/</code> 內應該可以看到 <code>OAPodTest</code> 目錄</li><li>可以在 <code>Test7/Test7/ViewController.swift</code> 內寫個測試，檔案開頭加入 <code>import OAPodTest</code> 就可使用 <code>testFunc</code></li></ul></li></ul><h2>刪除</h2><ul><li>執行指令：<code>pod trunk delete OAPodTest 0.0.1</code>，然後輸入 <code>yes</code> 即可</li><li>刪除完後，可在用 <code>pod trunk info OAPodTest</code> 檢查資訊</li></ul>
<ul><li><a href="https://cocoapods.org/">CocoaPods.org</a></li><li><a href="https://medium.com/practical-code-labs/how-to-create-private-cocoapods-in-swift-3cc199976a18">https://medium.com/practical-code-labs/how-to-create-private-cocoapods-in-swift-3cc199976a18</a></li><li><a href="https://www.jianshu.com/p/4b63dfbd8be7">https://www.jianshu.com/p/4b63dfbd8be7</a></li></ul>

2019-baishatun-gps
2019 白沙屯媽祖南下進香 GPS 系統
2019-03-07
<p>因為每年我都會協助幫忙準備這個「白沙屯媽祖南下進香」的活動，所以今年我也在準備著，一年一次，這個專案每年這時候都會啟動，常常有人會問我，不就是把去年的資料庫清空就好了嗎？</p><p>不！因為每一年，在我的技術上都是在進步，於是回頭看去年，總會有哪麼一點點不完美的地方，執著的工程師個性，就會想要把他重寫，讓這個專案更加完美！</p><p>這個專案每年從的資訊工程幾乎都是由我完成的，以下就是這次我個人完成的項目：</p><ul><li>後端程式碼 - <a href="https://zh.wikipedia.org/zh-tw/PHP">PHP</a></li><li><a href="https://aws.amazon.com/tw/">AWS</a> 系統架設<ul><li><a href="https://aws.amazon.com/tw/ec2/">EC2</a> - 後端伺服器</li><li><a href="https://aws.amazon.com/tw/rds/">RDS</a> - 資料庫</li><li><a href="https://aws.amazon.com/tw/s3/">S3</a> - 雲端空間</li><li><a href="https://aws.amazon.com/tw/cloudfront/">CloudFront</a> - CDN</li><li><a href="https://aws.amazon.com/tw/certificate-manager/">Certificate Manager</a> - 憑證管理</li></ul></li><li>GPS 訊號後台收集與校正</li><li>前端網頁地圖功能</li></ul><p>都是一個人完成，而這次也加入了開發 iOS App，其實成就感頗高！所以這篇會著重在 iOS Swift 的學習心得，若要看其他部分也可以參考<a href="https://www.ioa.tw/Develop/FullStack-2016-Baishatun-GPS.html">2016 的心得</a>！</p><p>廢話不多說。寫 App，當然是直接先給鏈結下載呀，有興趣的夥伴歡迎下載囉！</p><ul><li>App - <a href="https://itunes.apple.com/tw/app/id1455045995">白沙屯 GPS</a></li><li>網站 - <a href="https://gps.godmaps.tw/">2019 白沙屯 GPS</a></li><li>粉專 - <a href="https://www.facebook.com/baishatunGPS/">白沙屯媽祖在哪裡？</a></li></ul><h3>開發心得</h3><p>回想起當初想學 App 已經是三年前了，當初還是寫 Object-C，但因為本身工作是專職的網站前後端工程師，所以一直沒有時間好好的專研，頂多就是想到就寫個小 App，了解一下推播、Watch App.. 等，但都一直沒上架過，所以就默默的繳了三年的開發者費用，這就是信仰！？（疑）</p><p>在今年，我終於上架了我第一個 App</p><p>以往這個活動我都是使用網頁技術來呈現，但是從去年開始 Google Maps 就調漲了費用、收費方式，於是不得不另尋他路改採用 App 的方式來省錢，Google Maps 官方也寫了，採用 App SDK 好像基本的地圖就可以無上限使用，所以在今年一月底，我正式開始籌備今年度的 GPS 系統！</p><p>這個系統我想對很多資深的工程師來說困難度應該不高，主要就是讀取 API 並且將內容呈現，所以對我來說幾項重點：</p><ol><li>UI - Constraint</li><li>API - Alamofire</li><li>Maps - Google Maps</li><li>送審 - Reject</li></ol><h3>UI - Constraint</h3><p>以 UI 來說，我有練習過 Obj-c 的經驗，應該不難，就只是語法上的差異，而我在刻板時，其實很不習慣使用 storyboard，所以我的專案內都是採用 <a href="https://developer.apple.com/documentation/uikit/nslayoutconstraint">NSLayoutConstraint</a> 的方式將版型兜出來，可能是 css 切版習慣了，所以還是偏愛 Constraint 的方式來調整版型，所以自己寫了個簡單的 Lib 來使用，例如以下的方式讓我自己方便調整版型！</p><pre><code class="language-swift">OA.layout(self.view, nameView) {    $0.at(.left, .equal, .left, 8)    $0.at(.right, .equal, .right, 8)    $0.at(.top, .equal, self.view.safeAreaLayoutGuide, .top, 8)    $0.at(.height, .equal, 18)}</code></pre><p>其中包含 TableView 的 Cell 我也是這樣做，之後我還打算加入可以判斷螢幕寬高、旋轉的條件！</p><p>至於圖示，因為本身對於設計真的很外行，所以沒辦法產出我想要的 icon，但因為有網頁前端的經驗，所以很長使用 SVG 的 icon，於是使用了 <a href="http://mchoe.github.io/SwiftSVG/">SwiftSVG</a> 這個套件，所以 App 中的圖示，都是採用 SVG 的方式呈現。</p><h3>API - Alamofire</h3><p>API 的方式我採用 Alamofire 這個套件，因為以前 Obj-c 是使用 <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a>，上去 GitHub 看了一下，感覺他們推薦使用 <a href="https://github.com/Alamofire/Alamofire">Alamofire</a>，所以這專案我採用 Alamofire，使用方式網路上很多資源，而我把它進階包了一下，因為 <a href="https://docs.swift.org/swift-book/LanguageGuide/Closures.html">closure</a> 擺在後面可以直接這樣用，所以語意上好像更清楚了（？），範例如下：</p><pre><code class="language-swift">class Api {  static var get = ApiGet()  static var post = ApiPost()}class ApiGet {  public func path(_ closure:@escaping (([String: Any]) -&gt; Void)) {    Alamofire.request("API", method: .get).validate().responseJSON { response in        switch response.result {        case .success(let json):          return closure(json as! [String : Any]);        case .failure(let error):          // Error Func        }    }  }}class ApiPost {  public func path(_ closure:@escaping (([String: Any]) -&gt; Void)) {    // 以下省略  }}Api.get.path { json in  // 取得資料後要做的事}Api.post.location { json in  // 完成 Post 後要做的事}</code></pre><p>不過我其實也想說要不要改用原生的 <a href="https://developer.apple.com/documentation/foundation/nsurlconnection">NSURLConnection</a> 之類的，打造出自己的 Call Api 工具，這等之後熟一點後，在重新送一版好了ＸＤ</p><h3>Maps - Google Maps</h3><p>關於地圖，其實我原本想採用原生的 <a href="https://developer.apple.com/documentation/mapkit">MapKit</a>，但想到活動時，可能會有很多人不習慣 Apple Maps 的樣式，於是才依然使用 <a href="https://developers.google.com/maps/documentation/ios-sdk/start">Google Maps</a>。</p><p>安裝套件方法其實 <a href="https://developers.google.com/maps/documentation/ios-sdk/start">官方文件</a> 照著走就可以完成了，所以沒太大的難點，而使用方式也跟 <a href="https://developers.google.com/maps/documentation/javascript/tutorial">JavaScript</a> 大同小異。</p><p>唯一比較特別的是，在我的地圖上的 Marker 都是客製的 Marker，繼承 <a href="https://developers.google.com/maps/documentation/ios-sdk/marker">GMSMarker</a>，並取代其 <a href="https://developers.google.com/maps/documentation/ios-sdk/marker#use_the_markers_iconview_property">iconView</a> 即可，只是在算中心點位置時要特別注意 <a href="https://developers.google.com/maps/documentation/ios-sdk/reference/interface_g_m_s_marker.html#a65c160c7a9d3aadbbfc0a9a640fa826b">groundAnchor</a> 的算法。</p><p>在 Marker 的動畫上，我則練習了 <a href="https://developer.apple.com/documentation/quartzcore/caanimationgroup">CAAnimationGroup</a> 的用法，並且使用 <a href="https://developer.apple.com/documentation/quartzcore/camediatimingfunction">CAMediaTimingFunction</a> 來呈現動畫的效果，不過我對 iOS App 的 UI 效能還沒有很熟，所以我也不知道我的作法會不會有效能上的問題就是了ＸＤ</p><h3>送審 - Reject</h3><p>最後送審了！</p><p>其實我是按照「<a href="https://www.appcoda.com.tw/ios-app-submission/">iOS App 上架: 一步一腳印的新手教學和更新流程 - AppCoda</a>」這篇的步驟完成的，以上都順利，只是還是被 Reject 了一次，但好像第一次都被 Reject 好像都是正常的ＸＤ？</p><p>被 Reject 的原因是 <code>Privacy - Location When In Use Usage Description</code> 的原因沒寫清楚，若要取得使用者的位置資訊，那你就必須寫清楚是在 App 上的哪個功能使用，我原本是寫 <code>讓白沙屯媽祖取得你的位置吧！</code> 所以就被 Reject，但改成 <code>若允許取用您的位置，地圖上就可以顯示您與媽祖的相對位置，並且可以查看自己所在的地點。</code> 就審核通過啦！</p><p>不過意外的小插曲是，第一次送審雖然被 Reject 了，不過我從 Reject 的訊息中看到 Apple 的截圖才發現我送錯版了，看到截圖中怎會有測試站的資料，才發現我在 Archive 時，沒有調整 Scheme，所以把測試版拿去送審了，不過剛好與 <code>Privacy - Location When In Use Usage Description</code> 的問題一起重新送審！</p><h3>小結論</h3><p>以上很趕，短短一個月，所以還有很多東西沒做到完美，例如：效能、有效的 Debug</p><p>以後若有開發更進階的有趣的 App 我也會再分享，文章中若有錯誤觀念或者寫法，再麻煩指正，感謝 &gt;"&lt;"</p>
<ul><li><a href="https://gps.godmaps.tw/">https://gps.godmaps.tw/</a></li><li><a href="https://www.appcoda.com.tw/ios-app-submission/">https://www.appcoda.com.tw/ios-app-submission/</a></li><li><a href="https://www.appcoda.com.tw/intermediate-swift-tips/">https://www.appcoda.com.tw/intermediate-swift-tips/</a></li><li><a href="https://stackoverflow.com/questions/29311093/place-activity-indicator-over-uitable-view">https://stackoverflow.com/questions/29311093/place-activity-indicator-over-uitable-view</a></li><li><a href="http://mchoe.github.io/SwiftSVG/">http://mchoe.github.io/SwiftSVG/</a></li><li><a href="https://github.com/Alamofire/Alamofire">https://github.com/Alamofire/Alamofire</a></li></ul>

ios-cocoa-pods-note
CocoaPods 筆記
2017-11-28
<p>每次都會忘記，因為開發 iOS App 有時候都會用到 CocoaPods 安裝相關套件，所以筆記一下！</p><ul><li>參考 <a href="https://cocoapods.org/">https://cocoapods.org/</a></li><li>指令 <code>sudo gem install cocoapods</code></li><li>版本 <code>pod --version</code></li><li>初始 <code>pod init</code></li><li>安裝 AlamofireObjectMapper 在專案下 Podfile 加入 <code>pod 'AlamofireObjectMapper', '~&gt; 5.0'</code></li><li>執行 <code>pod install</code>，第一次會很久</li><li>原本應該開啟 <code>.xcodeproj</code> 改開啟 <code>.xcworkspace</code></li></ul>
<ul><li><a href="https://cocoapods.org/">CocoaPods.org</a></li></ul>

macos-high-sierra-install-php-apache-note
2017 macOS High Sierra 安裝 PHP Apache 筆記
2017-11-27
<p>最近因為需要開發 iOS App 所以逼得我自己需要把 Mac OS 更新到最新版本，但更新完後發現內建在 OSX 中的 PHP 版本居然變成了 7，變成 PHP 7 是不打緊，只是我需要的 PHP-imagick 套件一直安裝不起來，覺得氣餒，所以為了解決這問題下了一點點功課。</p><p>基本上在網路上找相關的解法都是用 <a href="https://brew.sh/index_zh-tw.html">Homebrew</a> 來解決這項問題，找了大半天終於讓我找到一篇完整的介紹，以下就用<a href="https://getgrav.org/blog/macos-sierra-apache-multiple-php-versions">此篇</a>來說明利用 Homebrew 來針對 PHP 版本控制的方法吧！</p><h3>環境設定</h3><p>更新 xcode command line，終端機下 <code>xcode-select --install</code></p><h3>安裝 Homebrew</h3><ul><li>安裝 Homebrew <code>ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"</code></li><li>顯示版本 <code>brew --version</code></li><li>檢查 <code>Brew brew doctor</code></li><li>執行設定 <code>brew tap homebrew/php</code>，Tap 的用意是之後就不用再打 <code>homebrew/php</code>，例如 <code>brew install homebrew/php/php71 --with-apache</code>，就可以直接 <code>brew install php71 --with-apache</code></li><li>更新 <code>brew brew update</code></li></ul><h3>移除停止使用 mac 原生的 Apache</h3><p>先暫停 Apache <code>sudo apachectl stop</code> 與 <code>sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2&gt;/dev/null</code></p><h3>安裝新的 Apache</h3><ul><li>用 Brew 安裝 <code>brew install httpd</code></li><li>啟動 <code>sudo brew services start httpd</code></li><li>設定 <code>ps -aef | grep httpd</code></li><li>重開 <code>sudo apachectl -k restart</code></li></ul><h3>新 Apache 指令</h3><ul><li>開啟 <code>sudo apachectl start</code></li><li>關閉 <code>sudo apachectl stop</code></li><li>重開 <code>sudo apachectl -k restart</code></li></ul><h3>新 Apache 相關設定</h3><ul><li>編輯 <code>/usr/local/etc/httpd/httpd.conf</code></li><li>修改一下項目<ul><li>Listen 80</li><li>DocumentRoot "/usr/local/var/www"</li><li>LoadModule rewrite_module lib/httpd/modules/mod_rewrite.so</li><li>ServerName localhost</li></ul></li><li>重開 Apache <code>sudo apachectl -k restart</code></li></ul><h3>安裝各版本的 PHP</h3><p>重新安裝記得 unlink 然後是下 reinstall 安裝 php，安裝會比較久別擔心。</p><ul><li>安裝 5.6 <code>brew install php56 --with-httpd</code></li><li>先移除 5.6 設定 <code>brew unlink php56</code></li><li>安裝 7.0 <code>brew install php70 --with-httpd</code></li><li>先移除 7.0 設定 <code>brew unlink php70</code></li><li>安裝 7.1 <code>brew install php71 --with-httpd</code></li></ul><p>可以順便安裝相關套件如 mcrypt、imagick、redis，各版本指令如下：</p><ul><li>5.6 版本 <code>brew install php56-mcrypt php56-imagick php56-redis</code></li><li>7.0 版本 <code>brew install php70-mcrypt php70-imagick php70-redis</code></li><li>7.1 版本 <code>brew install php71-mcrypt php71-imagick php71-redis</code></li></ul><p>各版本的 php.ini 分別在：</p><ul><li>5.6 版本 <code>/usr/local/etc/php/5.6/php.ini</code></li><li>7.0 版本 <code>/usr/local/etc/php/7.0/php.ini</code></li><li>7.1 版本 <code>/usr/local/etc/php/7.1/php.ini</code></li></ul><h3>更改 CLI 的 php 版本，以下以更改 5.6 為例</h3><ul><li>因最後一個 install 的是 7.1 所以記得移除 <code>brew unlink php71</code></li><li>改使用 5.6 <code>brew link php56</code></li></ul><p>※ 注意！這裡只有改到 cli 部分，Apache 還沒改掉所以 phpinfo 出來應該還是 7.1</p><h3>更改 Apache 的 php 版本</h3><p>以下以更改 5.6 為例</p><p>打開編輯 <code>/usr/local/etc/httpd/httpd.conf</code> 會發現多出如下：</p><pre><code>LoadModule php5_module /usr/local/Cellar/php56/5.6.31_7/libexec/apache2/libphp5.soLoadModule php7_module /usr/local/Cellar/php70/7.0.24_16/libexec/apache2/libphp7.soLoadModule php7_module /usr/local/Cellar/php71/7.1.10_21/libexec/apache2/libphp7.so</code></pre><p>將其改成</p><pre><code>LoadModule php5_module /usr/local/opt/php56/libexec/apache2/libphp5.soLoadModule php7_module /usr/local/opt/php70/libexec/apache2/libphp7.soLoadModule php7_module /usr/local/opt/php71/libexec/apache2/libphp7.so</code></pre><p>但只能一個，因為要以 5.6 為例子，所以其他註解起來</p><pre><code>LoadModule php5_module /usr/local/opt/php56/libexec/apache2/libphp5.so#LoadModule php7_module /usr/local/opt/php70/libexec/apache2/libphp7.so#LoadModule php7_module /usr/local/opt/php71/libexec/apache2/libphp7.so</code></pre><p>※ 注意！這裡改的是 Apache 部分，CLI 則不是這樣改的～</p><p>接著把</p><pre><code>&lt;IfModule dir_module&gt; DirectoryIndex index.html&lt;/IfModule&gt;</code></pre><p>改成</p><pre><code>&lt;IfModule dir_module&gt; DirectoryIndex index.php index.html&lt;/IfModule&gt;&lt;FilesMatch \.php$&gt; SetHandler application/x-httpd-php&lt;/FilesMatch&gt;</code></pre><p>然後重該 Apache <code>sudo apachectl -k restop</code></p><h3>版本切換工具</h3><p>因版本切換時，因為都要先 unlink 再 line 太麻煩，而且還有分 CLI 與 Apache 的更改兩步驟，所以可以使用 sphp 來快速解決這問題。</p><ul><li>安裝 <code>curl -L https://gist.github.com/w00fz/142b6b19750ea6979137b963df959d11/raw &gt; /usr/local/bin/sphp</code></li><li>更改權限 <code>chmod +x /usr/local/bin/sphp</code></li><li>安裝好後 <code>echo $PATH</code> 看一下有無 <strong>sphp</strong></li><li>舉例，終端機直個打 sphp 就可以列出可用的 php 版本，而切換 70 版本則 <code>sphp 70</code></li></ul><h3>筆記</h3><ul><li>新的 Apache conf 位置 <code>/usr/local/etc/httpd/httpd.conf</code></li><li>新的 Apache vhosts 位置 <code>/usr/local/etc/httpd/extra/httpd-vhosts.conf</code></li><li>Apache 開啟 <code>sudo apachectl start</code></li><li>Apache 關閉 <code>sudo apachectl stop</code></li><li>Apache 重開 <code>sudo apachectl -k restart</code></li></ul>
<ul><li><a href="https://getgrav.org/blog/macos-sierra-apache-multiple-php-versions">macOS 10.13 High Sierra Apache Setup: Multiple PHP Versions | Grav</a></li></ul>

2017-line-taiwan-techpulse
2017 LINE TW TechPulse
2017-11-03

